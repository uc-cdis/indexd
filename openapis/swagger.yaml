swagger: '2.0'
info:
  description: >-
    Indexd is a data indexing and tracking service. The code is open
    source on [github](https://github.com/uc-cdis/indexd)
  version: 1.0.0
  title: Indexd OpenAPI Specification
  termsOfService: 'http://cdis.uchicago.edu/terms/'
  contact:
    email: cdis@uchicago.edu
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: data.example.domain
basePath: /
tags:
  - name: global
    description: 'Search for an alias or index, potentially even a distributed search.'
    externalDocs:
      description: Find out more
      url: 'https://github.com/uc-cdis/indexd'
  - name: index
    description: 'Associate a file (object) with a unique id, and store some basic metadata.'
    externalDocs:
      description: Find out more
      url: 'https://github.com/uc-cdis/indexd'
  - name: bulk
    description: bulk endpoints
  - name: query
    description: query endpoints
  - name: alias
    description: >-
      create an alias for an entity stored in an external system managed by some
      other authority
    externalDocs:
      description: Find out more
      url: 'https://github.com/uc-cdis/indexd'
  - name: DOS
    description: 'Data Object Service Retrieval Endpoints'
  - name: system
    description: System endpoints
schemes:
  - https
paths:
  '/{GUID}':
    get:
      tags:
        - global
      summary: Get the metadata associated with the given id, alias, or distributed identifier
      description: Only the hashes which exist will be included in the response.
      operationId: getEntry
      produces:
        - application/json
      parameters:
        - name: GUID
          in: path
          description: entry id
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/OutputInfo'
        '400':
          description: Invalid status value
        '404':
          description: Record not found
      security: []
  '/urls':
    get:
      tags:
        - global
      summary: Get a list of urls that match query params
      description: ''
      operationId: listUrls
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: size
          in: query
          description: object size
          required: false
          type: integer
        - name: hash
          in: query
          type: string
          description: hashes specified as algorithm:value
        - name: ids
          in: query
          type: string
          description: comma delimited ids
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/UrlOutputRef'
        '400':
          description: Invalid input
      security:
        - basic_auth: []
  '/index':
    post:
      tags:
        - index
      summary: Add a new entry to the index
      description: ''
      operationId: addEntry
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Metadata object that needs to be added to the store. Providing at least one hash is necessary and sufficient.
          required: true
          schema:
            $ref: '#/definitions/InputInfo'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/OutputRef'
        '400':
          description: Invalid input
      security:
        - basic_auth: []
    get:
      tags:
        - index
      summary: List all records
      description: ''
      operationId: listEntries
      parameters:
        - name: urls_metadata
          in: query
          description: |
            urls_metadata in json string format as {url_key: {key: value}, ...}
            check doc.url_metadata has key that contains substring url_key
            and regular filter on key: value
          required: false
          type: string
        - name: metadata
          in: query
          description: metadata in format key:value
          required: false
          type: string
        - name: size
          in: query
          description: object size
          required: false
          type: integer
        - name: hash
          in: query
          description: hash in format hash_type:hash_value
          required: false
          type: string
        - name: uploader
          in: query
          description: uploader id
          required: false
          type: string
        - name: ids
          in: query
          description: |
            comma delimited ids, when provided,
            pagination params(start, limit) are not supported
          required: false
          type: string
        - name: urls
          in: query
          description: comma delimited urls
          required: false
          type: string
        - name: acl
          in: query
          description: comma delimited ace
          required: false
          type: string
        - name: negate_params
          in: query
          description: |
            All the negate params go in here as the same format with regular params:
            pass a Document as a json string with all the negated values.
            For string (version, file_name), filter with value != <value>
            For list (urls, acl), filter with doc that don't HAS <value>
            For dict (metadata, urls_metadata). In each (key,value) pair:
            - if value is None or empty: then filter with key doesn't exist
            - if value is provided, then filter with value != <value> OR key doesn't exist
          required: false
          type: string
        - name: start
          in: query
          description: start did
          required: false
          type: string
        - name: limit
          in: query
          description: number of records to return for this page, default to 100
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ListRecords'
      security: []
  '/index/blank':
    post:
      tags:
        - index
      summary: Create a blank record
      description: ''
      operationId: createBlankEntry
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Metadata object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/InputBlankInfo'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/OutputRef'
        '400':
          description: Invalid status value
      security:
        - basic_auth: []
  '/index/blank/{GUID}':
    put:
      tags:
        - index
      summary: Update only hashes and size for blank index
      description: ''
      operationId: updateBlankEntry
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: GUID
          in: path
          description: entry id
          required: true
          type: string
        - name: rev
          in: query
          description: data revision - simple consistency mechanism
          required: true
          type: string
        - in: body
          name: body
          description: index record that needs to be updated
          required: true
          schema:
            $ref: '#/definitions/UpdateBlankInputInfo'
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/OutputRef'
        '400':
          description: Invalid input
      security:
        - basic_auth: []
  '/index/{GUID}':
    get:
      tags:
        - index
      summary: Get the metadata associated with the given id
      operationId: getEntry
      produces:
        - application/json
      parameters:
        - name: GUID
          in: path
          description: entry id
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/OutputInfo'
        '400':
          description: Invalid status value
      security: []
    post:
      tags:
        - index
      summary: >-
        Add new version for the document associated to the provided uuid.
      description: Since data content is immutable, when you want to change the size or hash, a new index document with new uuid need to be created as its new version. That uuid is returned in the did field of the response. The old index document is not deleted.
      operationId: addNewVersion
      produces:
        - application/json
      parameters:
        - name: GUID
          in: path
          description: the uuid associated to the record needed to have new version
          required: true
          type: string
        - in: body
          name: body
          description: index record metadata for the new version
          required: true
          schema:
            $ref: '#/definitions/VersionInputInfo'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/OutputRef'
        '400':
          description: Invalid status value
      security:
        - basic_auth: []
    put:
      tags:
        - index
      summary: Update an existing entry in the index
      description: ''
      operationId: updateEntry
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: GUID
          in: path
          description: entry id
          required: true
          type: string
        - name: rev
          in: query
          description: data revision - simple consistency mechanism
          required: true
          type: string
        - in: body
          name: body
          description: index record that needs to be updated
          required: true
          schema:
            $ref: '#/definitions/UpdateInputInfo'
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/OutputRef'
        '400':
          description: Invalid input
      security:
        - basic_auth: []
    delete:
      tags:
        - index
      summary: Delete an entry from the index
      description: ''
      operationId: deleteEntry
      produces:
        - application/json
      parameters:
        - name: GUID
          in: path
          description: entry id
          required: true
          type: string
        - name: rev
          in: query
          description: data revision - simple consistency mechanism
          required: true
          type: string
      responses:
        '400':
          description: Invalid ID supplied
        '200':
          description: Record is deleted successfully
      security:
        - basic_auth: []
  '/index/{GUID}/latest':
    get:
      tags:
        - index
      summary: >-
        Get the metadata of the latest index record version associated with the
        given id
      operationId: getLatestVersion
      produces:
        - application/json
      parameters:
        - name: GUID
          in: path
          description: entry id
          required: true
          type: string
        - name: has_version
          in: query
          description: filter by latest doc that has version value populated
          required: false
          type: boolean
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/OutputInfo'
        '400':
          description: Invalid status value
      security: []
  '/index/{GUID}/versions':
    get:
      tags:
        - index
      summary: Get the metadata of index record versions associated with the given id
      operationId: getAllVersions
      produces:
        - application/json
      parameters:
        - name: GUID
          in: path
          description: entry id
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BulkOutputInfo'
        '400':
          description: Invalid status value
      security: []
  '/alias/':
    get:
      tags:
        - alias
      summary: list aliases with pagination
      operationId: listEntries
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: size
          in: query
          type: integer
          format: int64
          required: false
          description: size in bytes
        - name: start
          in: query
          type: integer
          format: int64
          required: false
          description: start index for the pagination
        - name: limit
          in: query
          type: integer
          required: false
          description: number of aliases to return
        - name: hash
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            properties:
              aliases:
                type: array
                items:
                  type: string
              size:
                type: integer
                format: int64
                description: size in bytes
              start:
                type: integer
                format: int64
                description: start index for the pagination
              limit:
                type: integer
                format: int64
                description: number of aliases to return
              hashes:
                $ref: '#/definitions/HashInfo'
  '/alias/{ALIASSTRING}':
    put:
      tags:
        - alias
      summary: Create or update an alias
      description: ''
      operationId: upsertEntry
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: ALIASSTRING
          in: path
          type: string
          required: true
          description: 'alias like ark:/31807/DC1-TESTARK'
        - name: rev
          in: query
          type: string
          pattern: '^[a-z,0-9]{8}$'
          required: false
          description: Revision of the current alias to be updated. If you do not specify this then the last update wins in races.
        - in: body
          name: body
          description: Metadata object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/AliasInputInfo'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/AliasRef'
        '400':
          description: Invalid input
      security:
        - basic_auth: []
    get:
      tags:
        - alias
      summary: Fetch an alias
      description: ''
      operationId: getEntry
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: ALIASSTRING
          in: path
          type: string
          required: true
          description: 'alias like ark:/31807/DC1-TESTARK'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/AliasOutputInfo'
        '400':
          description: Invalid input
      security: []
    delete:
      tags:
        - alias
      summary: Delete an alias
      description: ''
      operationId: deleteEntry
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: ALIASSTRING
          in: path
          type: string
          required: true
          description: 'alias like ark:/31807/DC1-TESTARK'
        - name: rev
          in: query
          type: string
          pattern: '^[a-z,0-9]{8}$'
          required: false
          description: Revision of the current alias to be deleted.
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid input
      security:
        - basic_auth: []
  /_status:
    get:
      tags:
        - system
      summary: Returns if IndexD is healthy or not
      description: >-
        Health check endpoint which checks if IndexD can connect to its
        backing datastore or not.
      produces:
        - application/text
      responses:
        '200':
          description: Healthy
        default:
          description: Unhealthy
  /_version:
    get:
      tags:
        - system
      summary: Returns the version of IndexD
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SystemVersionOutputRef'
  /_stats:
    get:
      tags:
        - system
      summary: Returns basic information about the records in IndexD
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SystemStatsOutputRef'
  /ga4gh/dos/v1/dataobjects:
    get:
      summary: List the Data Objects
      operationId: ListDataObjects
      responses:
        '200':
          description: The Data Objects were listed successfully.
          schema:
            $ref: '#/definitions/ListDataObjectsResponse'
        '400':
          description: The request is malformed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: The request is unauthorized.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: The requester is not authorized to perform this action.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: An unexpected error occurred.
          schema:
            $ref: '#/definitions/ErrorResponse'
      parameters:
        - name: alias
          in: query
          type: string
          required: false
          description: |-
            If provided will only return Data Objects with the given alias.
        - name: url
          in: query
          type: string
          required: false
          description: |-
            If provided will return only Data Objects with a that URL matches
            this string.
        - name: checksum
          in: query
          type: string
          required: false
          description: |-
            The hexlified checksum that one would like to match on.
        - name: checksum_type
          in: query
          type: string
          required: false
          description: |-
            If provided will restrict responses to those that match the provided
            type.
            possible values:
            md5                # most blob stores provide a checksum using this
            multipart-md5      # multipart uploads provide a specialized tag in S3
            sha256
            sha512
        - name: page_size
          in: query
          type: integer
          format: int32
          required: false
          description: |-
            Specifies the maximum number of results to return in a single page.
            If unspecified, a system default will be used.
        - name: page_token
          in: query
          type: string
          required: false
          description: |-
            The continuation token, which is used to page through large result sets.
            To get the next page of results, set this parameter to the value of
            `next_page_token` from the previous response.
      tags:
        - DOS
  '/ga4gh/dos/v1/dataobjects/{GUID}':
    get:
      summary: Retrieve a Data Object
      operationId: GetDataObject
      responses:
        '200':
          description: The Data Object was found successfully.
          schema:
            $ref: '#/definitions/GetDataObjectResponse'
        '400':
          description: The request is malformed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: The request is unauthorized.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: The requested Data Object wasn't found
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: The requester is not authorized to perform this action.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: An unexpected error occurred.
          schema:
            $ref: '#/definitions/ErrorResponse'
      parameters:
        - name: GUID
          in: path
          required: true
          type: string
      tags:
        - DOS
  '/bulk/documents':
    post:
      tags:
        - bulk
      summary: Get a list of documents given a list of dids
      operationId: getBulkIds
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: List of dids to retrieve
          required: true
          schema:
            $ref: '#/definitions/BulkInputInfo'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/BulkOutputInfo'
        '400':
          description: Invalid status value
      security: []
  '/_query/urls/q':
    get:
      tags:
        - query
      summary: search index records by urls
      operationId: queryUrls
      produces:
        - application/json
      parameters:
        - in: query
          name: exclude
          type: string
          description: search for documents without a single URL that match this pattern
          required: false
        - in: query
          name: include
          type: string
          description: search for documents with at least one URL that match this pattern
          required: false
        - in: query
          name: versioned
          type: boolean
          default: false
          description: if true search for documents with a version set, else search documents without version
          required: false
        - in: query
          name: limit
          type: integer
          default: 100
          description: maximum rows to return
          required: false
        - in: query
          name: offset
          type: integer
          default: 0
          description: pointer position to start search
          required: false
      responses:
        200:
          description: successful
          schema:
            $ref: '#/definitions/URLsOutput'
        400:
          description: invalid request parameters
  '/_query/urls/metadata/q':
    get:
      tags:
        - query
      summary: search index records by urls metadata key and value
      operationId: queryUrlsMetadata
      produces:
        - application/json
      parameters:
        - in: query
          name: key
          type: string
          description: metadata key to search by
          required: true
        - in: query
          name: value
          type: string
          description: metadata value for provided key
          required: true
        - in: query
          name: url
          type: string
          description: URL patter to filter by
          required: false
        - in: query
          name: versioned
          type: boolean
          default: false
          description: if true search for documents with a version set, else search documents without version
          required: false
        - in: query
          name: limit
          type: integer
          default: 100
          description: maximum rows to return
          required: false
        - in: query
          name: offset
          type: integer
          default: 0
          description: pointer position to start search
          required: false
      responses:
       200:
         description: successful
         schema:
           $ref: '#/definitions/URLsOutput'
       400:
         description: invalid request parameters

securityDefinitions:
  cdis_auth:
    type: oauth2
    authorizationUrl: 'https://data-commons.org/oauth/dialog'
    flow: implicit
    scopes:
      'write:index': modify any entry in the index
      'read:index': read any entry from the index
  basic_auth:
    type: basic
definitions:
  HashInfo:
    type: object
    properties:
      md5:
        type: string
        pattern: '^[0-9a-f]{32}$'
      sha:
        type: string
        pattern: '^[0-9a-f]{40}$'
      sha256:
        type: string
        pattern: '^[0-9a-f]{64}$'
      sha512:
        type: string
        pattern: '^[0-9a-f]{128}$'
      crc:
        type: string
        pattern: '^[0-9a-f]{8}$'
      etag:
        type: string
        pattern: '^[0-9a-f]{32}(-\d+)?$'
  VersionInputInfo:
    type: object
    required:
      - size
      - hashes
      - urls
      - form
    properties:
      did:
        $ref: "#/definitions/DID"
      form:
        type: string
        description: how the entry was submitted to storage
        enum:
          - object
          - container
          - multipart
      size:
        type: integer
        format: int64
        description: size in bytes
      file_name:
        type: string
      metadata:
        type: object
      urls_metadata:
        type: object
      version:
        type: string
      urls:
        type: array
        items:
          type: string
      acl:
        type: array
        items:
          type: string
      hashes:
        $ref: '#/definitions/HashInfo'
  BulkInputInfo:
    type: object
    required:
      - ids
    properties:
      ids:
        type: array
        items:
          type: string
  InputInfo:
    type: object
    required:
      - size
      - hashes
      - urls
      - form
    properties:
      did:
        $ref: "#/definitions/DID"
      baseid:
        $ref: "#/definitions/UUID"
      form:
        type: string
        description: how the entry was submitted to storage
        enum:
          - object
          - container
          - multipart
      size:
        type: integer
        format: int64
        description: size in bytes
      file_name:
        type: string
      metadata:
        type: object
      urls_metadata:
        type: object
      version:
        type: string
      urls:
        type: array
        items:
          type: string
      acl:
        type: array
        items:
          type: string
      hashes:
        $ref: '#/definitions/HashInfo'
  InputBlankInfo:
    type: object
    properties:
      uploader:
        type: string
        description: user who uploaded this file
      file_name:
        type: string
        description: name of the uploaded file
  UpdateInputInfo:
    type: object
    properties:
      file_name:
        type: string
      metadata:
        type: object
      urls_metadata:
        type: object
      version:
        type: string
      urls:
        type: array
        items:
          type: string
      acl:
        type: array
        items:
          type: string
  UpdateBlankInputInfo:
    type: object
    properties:
      size:
        type: integer
      hashes:
        $ref: '#/definitions/HashInfo'
      urls:
        type: array
        items:
          type: string
  OutputRef:
    type: object
    properties:
      did:
        $ref: "#/definitions/DID"
      baseid:
        $ref: "#/definitions/UUID"
      rev:
        type: string
        pattern: '^[0-9a-f]{8}$'
  AliasInputInfo:
    type: object
    required:
      - size
      - hashes
      - release
    properties:
      release:
        type: string
        description: has the entity been released?
        enum:
          - public
          - private
          - controlled
      size:
        type: integer
        format: int64
        description: size in bytes
      keeper_authority:
        description: who is keeping this entry up to date?
        type: string
      host_authority:
        description: who is hosting this entity?
        type: array
        items:
          type: string
      hashes:
        $ref: '#/definitions/HashInfo'
      metadata:
        type: string
  AliasRef:
    type: object
    properties:
      name:
        type: string
      rev:
        type: string
        pattern: '^[0-9a-f]{8}$'
  AliasOutputInfo:
    type: object
    properties:
      name:
        type: string
      rev:
        type: string
        pattern: '^[0-9a-f]{8}$'
      release:
        type: string
        description: has the entity been released?
        enum:
          - public
          - private
          - controlled
      size:
        type: integer
        format: int64
        description: size in bytes
      keeper_authority:
        description: who is keeping this entry up to date?
        type: string
      host_authorities:
        description: who is hosting this entity?
        type: array
        items:
          type: string
      hashes:
        $ref: '#/definitions/HashInfo'
      metadata:
        type: string
      limit:
        type: integer
        format: int64
        description: number of aliases to return
      start:
        type: integer
        format: int64
        description: start index for the pagination
      urls:
        type: array
        items:
          type: string
  DID:
    type: string
    pattern: >-
      ^.*[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
  UUID:
    type: string
    pattern: >-
      ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
  BulkOutputInfo:
    type: array
    items:
      $ref: "#/definitions/OutputInfo"
  OutputInfo:
    type: object
    properties:
      did:
        $ref: "#/definitions/DID"
      baseid:
        $ref: "#/definitions/UUID"
      rev:
        type: string
        pattern: '^[0-9a-f]{8}$'
      form:
        type: string
        description: how the entry was submitted to storage
        enum:
          - object
          - container
          - multipart
      size:
        type: integer
        format: int64
        description: size in bytes
      file_name:
        type: string
      version:
        type: string
      uploader:
        type: string
      urls:
        type: array
        items:
          type: string
      acl:
        type: array
        items:
          type: string
      hashes:
        $ref: '#/definitions/HashInfo'
      updated_date:
        type: string
        format: date-time
        description: last updated time
      created_date:
        type: string
        format: date-time
        description: time created
      metadata:
        type: object
        description: user defined optional metadata
      urls_metadata:
        type: object
        description: url level optional metadata
  SystemVersionOutputRef:
    type: object
    properties:
      commit:
        type: string
        description: the current git commit hash for this version
      version:
        type: string
        description: the current git tag version
  SystemStatsOutputRef:
    type: object
    properties:
      fileCount:
        type: integer
        description: the number of records stored in IndexD
      totalFileSize:
        type: integer
        description: the accumulated size of the object files recorded in IndexD
  DataObject:
    type: object
    required: ['id', 'size', 'created', 'checksums']
    properties:
      id:
        type: string
        description: |-
          An identifier unique to this Data Object.
      name:
        type: string
        description: |-
          A string that can be optionally used to name a Data Object.
      size:
        type: string
        format: int64
        description: |-
          The computed size in bytes.
      created:
        type: string
        format: date-time
        description: |-
          Timestamp of object creation in RFC3339.
      updated:
        type: string
        format: date-time
        description: |-
          Timestamp of update in RFC3339, identical to create timestamp in systems
          that do not support updates.
      version:
        type: string
        description: |-
          A string representing a version.
      mime_type:
        type: string
        description: |-
          A string providing the mime-type of the Data Object.
          For example, "application/json".
      checksums:
        type: array
        items:
          $ref: '#/definitions/Checksum'
        description: |-
          The checksum of the Data Object. At least one checksum must be provided.
      urls:
        type: array
        items:
          $ref: '#/definitions/URL'
        description: |-
          The list of URLs that can be used to access the Data Object.
      description:
        type: string
        description: |-
          A human readable description of the contents of the Data Object.
      aliases:
        type: array
        items:
          type: string
        description: |-
          A list of strings that can be used to find this Data Object.
          These aliases can be used to represent the Data Object's location in
          a directory (e.g. "bucket/folder/file.name") to make Data Objects
          more discoverable. They might also be used to represent
  ListDataObjectsRequest:
    type: object
    properties:
      alias:
        type: string
        description: |-
          If provided will only return Data Objects with the given alias.
      url:
        type: string
        description: |-
          If provided will return only Data Objects with a that URL matches
          this string.
      checksum:
        type: string
        description: |-
          The hexlified checksum that one would like to match on.
      checksum_type:
        type: string
        description: |-
          If provided will restrict responses to those that match the provided
          type.
          possible values:
          md5                # most blob stores provide a checksum using this
          multipart-md5      # multipart uploads provide a specialized tag in S3
          sha256
          sha512
      page_size:
        type: integer
        format: int32
        description: |-
          Specifies the maximum number of results to return in a single page.
          If unspecified, a system default will be used.
      page_token:
        type: string
        description: |-
          The continuation token, which is used to page through large result sets.
          To get the next page of results, set this parameter to the value of
          `next_page_token` from the previous response.
    description: |-
      Allows a requester to list and filter Data Objects. Only Data Objects
      matching all of the requested parameters will be returned.
  ListDataObjectsResponse:
    type: object
    properties:
      data_objects:
        type: array
        items:
          $ref: '#/definitions/DataObject'
        description: The list of Data Objects.
      next_page_token:
        type: string
        description: |-
          The continuation token, which is used to page through large result sets.
          Provide this value in a subsequent request to return the next page of
          results. This field will be empty if there aren't any additional results.
    description:  |-
      A list of Data Objects matching the requested parameters, and a paging
      token, that can be used to retrieve more results.
  GetDataObjectResponse:
    type: object
    required: ['data_object']
    properties:
      data_object:
        $ref: '#/definitions/DataObject'
  URL:
    type: object
    required: ['url']
    properties:
      url:
        type: string
        description: |-
          A URL that can be used to access the file.
      system_metadata:
        $ref: '#/definitions/SystemMetadata'
      user_metadata:
        $ref: '#/definitions/UserMetadata'
  URLsOutput:
    type: array
    items:
      type: object
      properties:
        did:
          type: string
        urls:
          type: array
          items:
            type: string
  SystemMetadata:
    type: object
    additionalProperties: true
    description: |-
            OPTIONAL
            These values are reported by the underlying object store.
            A set of key-value pairs that represent system metadata about the object.
  UserMetadata:
    type: object
    additionalProperties: true
    description: |-
            OPTIONAL
            A set of key-value pairs that represent metadata provided by the uploader.
  Checksum:
    type: object
    required: ['checksum']
    properties:
      checksum:
        type: string
        description: |-
          The hex-string encoded checksum for the Data.
      type:
        type: string
        description: |-
          The digest method used to create the checksum. If left unspecified md5
          will be assumed.
          possible values:
          md5                # most blob stores provide a checksum using this
          multipart-md5      # multipart uploads provide a specialized tag in S3
          sha256
          sha512
  ChecksumRequest:
    type: object
    properties:
      checksum:
        type: string
        description: |-
          REQUIRED
          The hexlified checksum that one would like to match on.
      type:
        type: string
        description: |-
          OPTIONAL
          If provided will restrict responses to those that match the provided
          type.
          possible values:
          md5                # most blob stores provide a checksum using this
          multipart-md5      # multipart uploads provide a specialized tag in S3
          sha256
          sha512
  ErrorResponse:
    description:
      An object that can optionally include information about the error.
    type: object
    properties:
      msg:
        type: string
        description: A detailed error message.
      status_code:
        type: integer
        description: The integer representing the HTTP status code (e.g. 200, 404).
  UrlObject:
    type: object
    properties:
      url:
        type: string
      metadata:
        type: object
  UrlOutputRef:
    type: object
    properties:
      urls:
        type: array
        items:
          $ref: "#/definitions/UrlObject"
      size:
        type: integer
        format: int64
        description: size in bytes
      start:
        type: integer
        format: int64
        description: start index for the pagination
      limit:
        type: integer
        format: int64
        description: number of aliases to return
      hashes:
        $ref: '#/definitions/HashInfo'
  ListRecords:
    type: object
    properties:
      ids:
        type: array
        items:
          $ref: '#/definitions/DID'
      records:
        type: array
        items:
          $ref: "#/definitions/OutputInfo"
      size:
        type: integer
        format: int64
        description: size in bytes
      start:
        type: integer
        format: int64
        description: start index for the pagination
      limit:
        type: integer
        format: int64
        description: number of dids to return
      file_name:
        type: string
      urls:
        type: array
        items:
          type: string
      acl:
        type: array
        items:
          type: string
      hashes:
        $ref: '#/definitions/HashInfo'
      metadata:
        type: object
      version:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
