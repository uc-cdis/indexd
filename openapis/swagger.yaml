swagger: '2.0'
info:
  description: >-
    Indexd is a data indexing and tracking service. The code is open
    source on [github](https://github.com/uc-cdis/indexd)
  version: 1.0.0
  title: Indexd OpenAPI Specification
  termsOfService: 'http://cdis.uchicago.edu/terms/'
  contact:
    email: cdis@uchicago.edu
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: data.example.domain
basePath: /
tags:
  - name: global
    description: 'Search for an alias or index, potentially even a distributed search.'
    externalDocs:
      description: Find out more
      url: 'https://github.com/uc-cdis/indexd'
  - name: index
    description: 'Associate a file (object) with a unique id, and store some basic metadata.'
    externalDocs:
      description: Find out more
      url: 'https://github.com/uc-cdis/indexd'
  - name: alias
    description: >-
      create an alias for an entity stored in an external system managed by some
      other authority
    externalDocs:
      description: Find out more
      url: 'https://github.com/uc-cdis/indexd'
  - name: system
    description: System endpoints
schemes:
  - https
paths:
  '/{UUID}':
    get:
      tags:
        - global
      summary: Get the metadata associated with the given id, alias, or distributed identifier
      description: Multiple status values can be provided with comma separated strings
      operationId: getEntry
      produces:
        - application/json
      parameters:
        - name: UUID
          in: path
          description: entry id
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/OutputInfo'
        '400':
          description: Invalid status value
        '404':
          description: Record not found
      security: []
  '/index':
    post:
      tags:
        - index
      summary: Add a new entry to the index
      description: ''
      operationId: addEntry
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Metadata object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/InputInfo'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/OutputRef'
        '400':
          description: Invalid input
      security:
        - basic_auth: []
    get:
      tags:
        - index
      summary: List all records
      description: ''
      operationId: listEntries
      parameters:
        - name: metadata
          in: query
          description: metadata in format key:value
          required: false
          type: string
        - name: size
          in: query
          description: object size
          required: false
          type: integer
        - name: hash
          in: query
          description: hash in format hash_type:hash_value
          required: false
          type: string
        - name: ids
          in: query
          description: |
            comma delimited ids, when provided,
            pagination params(start, limit) are not supported
          required: false
          type: string
        - name: urls
          in: query
          description: comma delimited urls
          required: false
          type: string
        - name: start
          in: query
          description: start did
          required: false
          type: string
        - name: limit
          in: query
          description: number of records to return for this page, default to 100
          required: false
          type: integer
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            properties:
              ids:
                type: array
                items:
                  $ref: '#/definitions/DID'
              records:
                type: array
                items:
                  $ref: "#/definitions/OutputInfo"
              size:
                type: integer
                format: int64
                description: size in bytes
              start:
                type: integer
                format: int64
                description: start index for the pagination
              limit:
                type: integer
                format: int64
                description: number of dids to return
              file_name:
                type: string
              urls:
                type: array
                items:
                  type: string
              acl:
                type: array
                items:
                  type: string
              hashes:
                $ref: '#/definitions/HashInfo'
      security: []
  '/index/{UUID}':
    get:
      tags:
        - index
      summary: Get the metadata associated with the given id
      description: Multiple status values can be provided with comma separated strings
      operationId: getEntry
      produces:
        - application/json
      parameters:
        - name: UUID
          in: path
          description: entry id
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/OutputInfo'
        '400':
          description: Invalid status value
      security: []
    post:
      tags:
        - index
      summary: >-
        Add new version for the document associated to the provided uuid.
      description: Since data content is immutable, when you want to change the size or hash, a new index document with new uuid need to be created as its new version. That uuid is returned in the did field of the response
      operationId: addNewVersion
      produces:
        - application/json
      parameters:
        - name: UUID
          in: path
          description: the uuid associated to the record needed to have new version
          required: true
          type: string
        - in: body
          name: body
          description: index record metadata for the new version
          required: true
          schema:
            $ref: '#/definitions/VersionInputInfo'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/OutputRef'
        '400':
          description: Invalid status value
      security:
        - basic_auth: []
  '/index/{DID}':
    put:
      tags:
        - index
      summary: Update an existing entry in the index
      description: ''
      operationId: updateEntry
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: DID
          in: path
          description: entry id
          required: true
          type: string
        - name: rev
          in: query
          description: data revision - simple consistency mechanism
          required: true
          type: string
        - in: body
          name: body
          description: index record that needs to be updated
          required: true
          schema:
            $ref: '#/definitions/UpdateInputInfo'
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/OutputRef'
        '400':
          description: Invalid input
      security:
        - basic_auth: []
    delete:
      tags:
        - index
      summary: Delete an entry from the index
      description: ''
      operationId: deleteEntry
      produces:
        - application/json
      parameters:
        - name: DID
          in: path
          description: entry id
          required: true
          type: string
        - name: rev
          in: query
          description: data revision - simple consistency mechanism
          required: true
          type: string
      responses:
        '400':
          description: Invalid ID supplied
        '200':
          description: Record is deleted successfully
      security:
        - basic_auth: []
  '/index/{UUID}/latest':
    get:
      tags:
        - index
      summary: >-
        Get the metadata of the latest index record version associated with the
        given id
      description: Multiple status values can be provided with comma separated strings
      operationId: getLatestVersion
      produces:
        - application/json
      parameters:
        - name: UUID
          in: path
          description: entry id
          required: true
          type: string
        - name: has_version
          in: query
          description: filter by latest doc that has version value populated
          required: false
          type: boolean
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/OutputInfo'
        '400':
          description: Invalid status value
      security: []
  '/index/{UUID}/versions':
    get:
      tags:
        - index
      summary: Get the metadata of index record versions associated with the given id
      description: Multiple status values can be provided with comma separated strings
      operationId: getAllVersions
      produces:
        - application/json
      parameters:
        - name: UUID
          in: path
          description: entry id
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/OutputInfo'
        '400':
          description: Invalid status value
      security: []
  '/alias/':
    get:
      tags:
        - alias
      summary: list aliases with pagination
      operationId: listEntries
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: size
          in: query
          type: integer
          format: int64
          required: false
          description: size in bytes
        - name: start
          in: query
          type: integer
          format: int64
          required: false
          description: start index for the pagination
        - name: limit
          in: query
          type: integer
          required: false
          description: number of aliases to return
        - name: hash
          in: query
          required: false
          format: string
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            properties:
              aliases:
                type: array
                items:
                  type: string
              size:
                type: integer
                format: int64
                description: size in bytes
              start:
                type: integer
                format: int64
                description: start index for the pagination
              limit:
                type: integer
                format: int64
                description: number of aliases to return
              hashes:
                $ref: '#/definitions/HashInfo'
  '/alias/{ALIASSTRING}':
    put:
      tags:
        - alias
      summary: Create or update an alias
      description: ''
      operationId: upsertEntry
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: ALIASSTRING
          in: path
          type: string
          required: true
          description: 'alias like ark:/31807/DC1-TESTARK'
        - name: rev
          in: query
          type: string
          pattern: '^[a-z,0-9]{8}$'
          required: false
          description: Revision of the current alias to be updated. If you do not specify this then the last update wins in races.
        - in: body
          name: body
          description: Metadata object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/AliasInputInfo'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/AliasRef'
        '400':
          description: Invalid input
      security:
        - basic_auth: []
    get:
      tags:
        - alias
      summary: Fetch an alias
      description: ''
      operationId: getEntry
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: ALIASSTRING
          in: path
          type: string
          required: true
          description: 'alias like ark:/31807/DC1-TESTARK'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/AliasOutputInfo'
        '400':
          description: Invalid input
      security: []
    delete:
      tags:
        - alias
      summary: Delete an alias
      description: ''
      operationId: deleteEntry
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: ALIASSTRING
          in: path
          type: string
          required: true
          description: 'alias like ark:/31807/DC1-TESTARK'
        - name: rev
          in: query
          type: string
          pattern: '^[a-z,0-9]{8}$'
          required: false
          description: Revision of the current alias to be deleted.
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/AliasRef'
        '400':
          description: Invalid input
      security:
        - basic_auth: []
  /_status:
    get:
      tags:
        - system
      summary: Returns if IndexD is healthy or not
      description: >-
        Health check endpoint which checks if IndexD can connect to its
        backing datastore or not.
      produces:
        - application/text
      responses:
        '200':
          description: Healthy
        default:
          description: Unhealthy
  /_version:
    get:
      tags:
        - system
      summary: Returns the version of IndexD
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SystemVersionOutputRef'
  /_stats:
    get:
      tags:
        - system
      summary: Returns basic information about the records in IndexD
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/SystemStatsOutputRef'
securityDefinitions:
  cdis_auth:
    type: oauth2
    authorizationUrl: 'https://data-commons.org/oauth/dialog'
    flow: implicit
    scopes:
      'write:index': modify any entry in the index
      'read:index': read any entry from the index
  basic_auth:
    type: basic
    name: basic_auth
    in: header
definitions:
  HashInfo:
    type: object
    properties:
      md5:
        type: string
        pattern: '^[0-9a-f]{32}$'
      sha:
        type: string
        pattern: '^[0-9a-f]{40}$'
      sha256:
        type: string
        pattern: '^[0-9a-f]{64}$'
      sha512:
        type: string
        pattern: '^[0-9a-f]{128}$'
      crc:
        type: string
        pattern: '^[0-9a-f]{8}$'
      etag:
        type: string
        pattern: '^[0-9a-f]{32}(-\d+)?$'
  VersionInputInfo:
    type: object
    required:
      - size
      - hashes
      - urls
      - form
    properties:
      did:
        $ref: "#/definitions/DID"
      form:
        type: string
        description: how the entry was submitted to storage
        enum:
          - object
          - container
          - multipart
      size:
        type: integer
        format: int64
        description: size in bytes
      file_name:
        type: string
      metadata:
        type: object
      urls_metadata:
        type: object
      version:
        type: string
      urls:
        type: array
        items:
          type: string
      acl:
        type: array
        items:
          type: string
      hashes:
        $ref: '#/definitions/HashInfo'
  InputInfo:
    type: object
    required:
      - size
      - hashes
      - urls
      - form
    properties:
      did:
        $ref: "#/definitions/DID"
      baseid:
        $ref: "#/definitions/UUID"
      form:
        type: string
        description: how the entry was submitted to storage
        enum:
          - object
          - container
          - multipart
      size:
        type: integer
        format: int64
        description: size in bytes
      file_name:
        type: string
      metadata:
        type: object
      urls_metadata:
        type: object
      version:
        type: string
      urls:
        type: array
        items:
          type: string
      acl:
        type: array
        items:
          type: string
      hashes:
        $ref: '#/definitions/HashInfo'
  UpdateInputInfo:
    type: object
    properties:
      base_id:
        type: string
        pattern: >-
          ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
      file_name:
        type: string
      metadata:
        type: object
      urls_metadata:
        type: object
      version:
        type: string
      urls:
        type: array
        items:
          type: string
      acl:
        type: array
        items:
          type: string
  OutputRef:
    type: object
    properties:
      did:
        $ref: "#/definitions/DID"
      baseid:
        $ref: "#/definitions/UUID"
      rev:
        type: string
        pattern: '^[0-9a-f]{8}$'
  AliasInputInfo:
    type: object
    properties:
      release:
        type: string
        description: has the entity been released?
        enum:
          - public
          - private
          - controlled
      size:
        type: integer
        format: int64
        description: size in bytes
      keeper_authority:
        description: who is keeping this entry up to date?
        type: string
      host_authority:
        description: who is hosting this entity?
        type: array
        items:
          type: string
      hashes:
        $ref: '#/definitions/HashInfo'
      metadata:
        type: string
  AliasRef:
    type: object
    properties:
      name:
        type: string
      rev:
        type: string
        pattern: '^[0-9a-f]{8}$'
  AliasOutputInfo:
    type: object
    properties:
      name:
        type: string
      rev:
        type: string
        pattern: '^[0-9a-f]{8}$'
      release:
        type: string
        description: has the entity been released?
        enum:
          - public
          - private
          - controlled
      size:
        type: integer
        format: int64
        description: size in bytes
      keeper_authority:
        description: who is keeping this entry up to date?
        type: string
      host_authority:
        description: who is hosting this entity?
        type: array
        items:
          type: string
      hashes:
        $ref: '#/definitions/HashInfo'
      metadata:
        type: string
  DID:
    type: string
    pattern: >-
      ^.*[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
  UUID:
    type: string
    pattern: >-
      ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
  OutputInfo:
    type: object
    properties:
      did:
        $ref: "#/definitions/DID"
      baseid:
        $ref: "#/definitions/UUID"
      rev:
        type: string
        pattern: '^[0-9a-f]{8}$'
      form:
        type: string
        description: how the entry was submitted to storage
        enum:
          - object
          - container
          - multipart
      size:
        type: integer
        format: int64
        description: size in bytes
      file_name:
        type: string
      version:
        type: string
      urls:
        type: array
        items:
          type: string
      acl:
        type: array
        items:
          type: string
      hashes:
        $ref: '#/definitions/HashInfo'
      updated_date_by:
        type: string
        format: date-time
        description: last updated time
      metadata:
        type: object
        description: user defined optional metadata
      urls_metadata:
        type: object
        description: url level optional metadata
  SystemVersionOutputRef:
    type: object
    properties:
      commit:
        type: string
        description: the current git commit hash for this version
      version:
        type: string
        description: the current git tag version
  SystemStatsOutputRef:
    type: object
    properties:
      fileCount:
        type: integer
        description: the number of records stored in IndexD
      totalFileSize:
        type: integer
        description: the accumulated size of the object files recorded in IndexD
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
